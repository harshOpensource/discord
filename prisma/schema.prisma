generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(uuid()) @map("_id")
  userId   String @unique
  name     String
  imageUrl String @db.String
  email    String @db.String

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String    @id @default(uuid()) @map("_id")
  name       String
  imageUrl   String    @db.String
  inviteCode String    @unique @db.String
  members    Member[]
  channels   Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id             String           @id @default(uuid()) @map("_id")
  role           MemberRole       @default(GUEST)
  messages       Message[]
  directMessages directMessages[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  conversationInitiated Conversation[] @relation("MemberOne")
  conversationReceived  Conversation[] @relation("MemberTwo")

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  Server    Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId  String?

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid()) @map("_id")
  name String
  type ChannelType @default(TEXT)

  Profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?
  Server    Server?  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId  String?

  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String  @id @default(uuid()) @map("_id")
  content String  @db.String
  fileUrl String? @db.String

  member   Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String?

  channelId String?
  channel   Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id String @id @default(uuid()) @map("_id")

  member      Member? @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberOneId String?

  memberTwoId String?
  memberTwo   Member? @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages directMessages[]

  @@index([memberOneId])
  @@index([memberTwoId])
}

model directMessages {
  id      String @id @default(uuid()) @map("_id")
  content String @db.String
  fileUrl String @db.String

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
